(()=>{const t=!1,e="_actors_ifdt";let i=globalThis[e];(()=>{if(i)return;const o={};i=function e(i){const a={},n=new Proxy(i,{get:(s,c)=>"assign"===c?t=>{Object.assign(n,t)}:(c in i||(i[c]={},a[c]=e(i[c]),i===o&&t&&(globalThis[c]=i[c])),c in a?a[c]:i[c]),set:(e,n,s)=>(i[n]=s,a[n]=s,i===o&&t&&(globalThis[n]=i[n]),!0)});return n}(o),globalThis[e]=i,t&&(globalThis.app=o)})(),(()=>{const{$ai:t,$bus:e}=i;t.controller={init(){this._closeAuthPopupOnSuccess()},async _closeAuthPopupOnSuccess(){await e.send("openai.isAuthPopup")&&(await this._waitForChatInterface(),await this._waitForLogin(),setTimeout((()=>window.close()),1500))},async _waitForChatInterface(){await new Promise((t=>{const e=setInterval((()=>{!!document.querySelector("#__next main")&&(clearInterval(e),t())}),50)}))},async _waitForLogin(){await new Promise((t=>{setTimeout((async()=>{try{await this._waitNoMutations();const e="https://chat.openai.com/api/auth/session",i=await fetch(e,{credentials:"include"});(await i.json()).error&&await this._waitForLogin(),t()}catch(t){console.error("failed to fetch session",t)}}),1500)}))},async _waitNoMutations(t=1e3){await new Promise((e=>{const i=()=>{e(),a.disconnect()};let o=setTimeout(i,t);const a=new MutationObserver((()=>{clearTimeout(o),o=setTimeout(i,t)}));a.observe(document.documentElement,{attributes:!0,childList:!0,subtree:!0})}))}}})(),(()=>{const{$startup:t,$ai:e}=i;t.openaiController={init(){e.controller.init()}},t.openaiController.init()})()})();